
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007e8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000994  08000994  00001994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009d4  080009d4  00002194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009d4  080009d4  00002194  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009d4  080009d4  00002194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d4  080009d4  000019d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009d8  080009d8  000019d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  080009dc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000194  08000b70  00002194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08000b70  000021b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001095  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000396  00000000  00000000  00003259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000035f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000087  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001244  00000000  00000000  00003737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c33  00000000  00000000  0000497b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004a4d  00000000  00000000  000055ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000234  00000000  00000000  0000a040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0000a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000194 	.word	0x20000194
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800097c 	.word	0x0800097c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000198 	.word	0x20000198
 80001e8:	0800097c 	.word	0x0800097c

080001ec <activate_clock_for>:
    GPIO_TypeDef *port;
    uint32_t pin;
} Pin;

void activate_clock_for(REG32 *reg, int gpio_en_bit)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    *reg |= (1 << gpio_en_bit);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2101      	movs	r1, #1
 80001fc:	683a      	ldr	r2, [r7, #0]
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <gpio_init>:

void gpio_init(GPIO_TypeDef *GPIOx, GPIO_InitStruct *init)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
    uint32_t pin_pos = init->Pin * 2U;
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	60fb      	str	r3, [r7, #12]

    GPIOx->MODER &= ~(0b11 << pin_pos);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2103      	movs	r1, #3
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	43d2      	mvns	r2, r2
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (init->Mode << pin_pos);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6859      	ldr	r1, [r3, #4]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	431a      	orrs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	601a      	str	r2, [r3, #0]

    GPIOx->OSPEEDR &= ~(0b11 << pin_pos);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	2103      	movs	r1, #3
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	43d2      	mvns	r2, r2
 800025c:	401a      	ands	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |= (init->Speed << pin_pos);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	68d9      	ldr	r1, [r3, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	431a      	orrs	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	609a      	str	r2, [r3, #8]

    GPIOx->PUPDR &= ~(0b11 << pin_pos);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	2103      	movs	r1, #3
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= (init->Pull << pin_pos);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	68da      	ldr	r2, [r3, #12]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	6899      	ldr	r1, [r3, #8]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <gpio_write_pin>:

void gpio_write_pin(GPIO_TypeDef *GPIOx, uint32_t pin, uint32_t state)
{
 80002aa:	b480      	push	{r7}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
    if (state == HIGH)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d109      	bne.n	80002d0 <gpio_write_pin+0x26>
    {
        SET_BIT(GPIOx->BSRR, pin);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	2101      	movs	r1, #1
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	619a      	str	r2, [r3, #24]
    }
    else
    {
        SET_BIT(GPIOx->BRR, pin);
    }
}
 80002ce:	e008      	b.n	80002e2 <gpio_write_pin+0x38>
        SET_BIT(GPIOx->BRR, pin);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002d4:	2101      	movs	r1, #1
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	431a      	orrs	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <gpio_read_pin>:

uint32_t gpio_read_pin(GPIO_TypeDef *GPIOx, uint32_t pin)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	6039      	str	r1, [r7, #0]
    return (GPIOx->IDR & (1 << pin)) ? HIGH : LOW;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	2101      	movs	r1, #1
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	4013      	ands	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	bf14      	ite	ne
 800030a:	2301      	movne	r3, #1
 800030c:	2300      	moveq	r3, #0
 800030e:	b2db      	uxtb	r3, r3
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <enable_VddIO2>:

void enable_VddIO2()
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    SET_BIT(PWR->CR2, 9);
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <enable_VddIO2+0x20>)
 8000322:	889b      	ldrh	r3, [r3, #4]
 8000324:	b29b      	uxth	r3, r3
 8000326:	4a05      	ldr	r2, [pc, #20]	@ (800033c <enable_VddIO2+0x20>)
 8000328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800032c:	b29b      	uxth	r3, r3
 800032e:	8093      	strh	r3, [r2, #4]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40007000 	.word	0x40007000

08000340 <tim6_init>:
} TIMx_TypeDef;

#define TIM6 ((TIMx_TypeDef *)TIM6_BASE)

void tim6_init(uint16_t prescaler, uint16_t autoreload)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	460a      	mov	r2, r1
 800034a:	80fb      	strh	r3, [r7, #6]
 800034c:	4613      	mov	r3, r2
 800034e:	80bb      	strh	r3, [r7, #4]
    activate_clock_for(&RCC->APB1ENR1, 4);
 8000350:	2104      	movs	r1, #4
 8000352:	480a      	ldr	r0, [pc, #40]	@ (800037c <tim6_init+0x3c>)
 8000354:	f7ff ff4a 	bl	80001ec <activate_clock_for>
    TIM6->PSC = prescaler;
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <tim6_init+0x40>)
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	8513      	strh	r3, [r2, #40]	@ 0x28
    TIM6->ARR = autoreload;
 800035e:	4a08      	ldr	r2, [pc, #32]	@ (8000380 <tim6_init+0x40>)
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	8593      	strh	r3, [r2, #44]	@ 0x2c
    TIM6->CR1 |= (1 << 0);
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <tim6_init+0x40>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	b29b      	uxth	r3, r3
 800036a:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <tim6_init+0x40>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	b29b      	uxth	r3, r3
 8000372:	8013      	strh	r3, [r2, #0]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021058 	.word	0x40021058
 8000380:	40001000 	.word	0x40001000

08000384 <delay>:

void delay(uint32_t val)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i <= val * 100; i++)
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e002      	b.n	8000398 <delay+0x14>
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2264      	movs	r2, #100	@ 0x64
 800039c:	fb03 f202 	mul.w	r2, r3, r2
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d2f5      	bcs.n	8000392 <delay+0xe>
    {
        // do nothing
    };
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <init_seven_segment>:

int counter = COUNTER_MIN;
int cycle = 0;

void init_seven_segment()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	@ 0x28
 80003b8:	af00      	add	r7, sp, #0
	enable_VddIO2();
 80003ba:	f7ff ffaf 	bl	800031c <enable_VddIO2>
	activate_clock_for(&RCC->AHB2ENR, GPIOBEN);
 80003be:	2101      	movs	r1, #1
 80003c0:	4828      	ldr	r0, [pc, #160]	@ (8000464 <init_seven_segment+0xb0>)
 80003c2:	f7ff ff13 	bl	80001ec <activate_clock_for>
	activate_clock_for(&RCC->AHB2ENR, GPIOGEN);
 80003c6:	2106      	movs	r1, #6
 80003c8:	4826      	ldr	r0, [pc, #152]	@ (8000464 <init_seven_segment+0xb0>)
 80003ca:	f7ff ff0f 	bl	80001ec <activate_clock_for>

	for(int i = 0; i < 7; i++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80003d2:	e014      	b.n	80003fe <init_seven_segment+0x4a>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = seventSegmentDisplay[i].pin;
 80003d4:	4a24      	ldr	r2, [pc, #144]	@ (8000468 <init_seven_segment+0xb4>)
 80003d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	4413      	add	r3, r2
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	613b      	str	r3, [r7, #16]
		initStruct.Mode = MODE_OUTPUT;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
		initStruct.Pull = PULL_NO;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
		initStruct.Speed = OUTPUT_LOWSPEED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
		gpio_init(GPIOG, &initStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	481e      	ldr	r0, [pc, #120]	@ (800046c <init_seven_segment+0xb8>)
 80003f4:	f7ff ff0e 	bl	8000214 <gpio_init>
	for(int i = 0; i < 7; i++)
 80003f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fa:	3301      	adds	r3, #1
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80003fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000400:	2b06      	cmp	r3, #6
 8000402:	dde7      	ble.n	80003d4 <init_seven_segment+0x20>
	}

	for(int i = 0; i < 4; i++)
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
 8000408:	e024      	b.n	8000454 <init_seven_segment+0xa0>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = digits[i].pin;
 800040a:	4a19      	ldr	r2, [pc, #100]	@ (8000470 <init_seven_segment+0xbc>)
 800040c:	6a3b      	ldr	r3, [r7, #32]
 800040e:	00db      	lsls	r3, r3, #3
 8000410:	4413      	add	r3, r2
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	603b      	str	r3, [r7, #0]
		initStruct.Mode = MODE_OUTPUT;
 8000416:	2301      	movs	r3, #1
 8000418:	607b      	str	r3, [r7, #4]
		initStruct.Pull = PULL_NO;
 800041a:	2300      	movs	r3, #0
 800041c:	60bb      	str	r3, [r7, #8]
		initStruct.Speed = OUTPUT_LOWSPEED;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
		gpio_init(digits[i].port, &initStruct);
 8000422:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <init_seven_segment+0xbc>)
 8000424:	6a3b      	ldr	r3, [r7, #32]
 8000426:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800042a:	463a      	mov	r2, r7
 800042c:	4611      	mov	r1, r2
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fef0 	bl	8000214 <gpio_init>
		gpio_write_pin(digits[i].port, digits[i].pin, HIGH);
 8000434:	4a0e      	ldr	r2, [pc, #56]	@ (8000470 <init_seven_segment+0xbc>)
 8000436:	6a3b      	ldr	r3, [r7, #32]
 8000438:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800043c:	4a0c      	ldr	r2, [pc, #48]	@ (8000470 <init_seven_segment+0xbc>)
 800043e:	6a3b      	ldr	r3, [r7, #32]
 8000440:	00db      	lsls	r3, r3, #3
 8000442:	4413      	add	r3, r2
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	f7ff ff2e 	bl	80002aa <gpio_write_pin>
	for(int i = 0; i < 4; i++)
 800044e:	6a3b      	ldr	r3, [r7, #32]
 8000450:	3301      	adds	r3, #1
 8000452:	623b      	str	r3, [r7, #32]
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	2b03      	cmp	r3, #3
 8000458:	ddd7      	ble.n	800040a <init_seven_segment+0x56>
	}
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	4002104c 	.word	0x4002104c
 8000468:	20000000 	.word	0x20000000
 800046c:	48001800 	.word	0x48001800
 8000470:	20000038 	.word	0x20000038

08000474 <init_joystick>:


void init_joystick()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
	activate_clock_for(&RCC->AHB2ENR, GPIOEEN);
 800047a:	2104      	movs	r1, #4
 800047c:	4818      	ldr	r0, [pc, #96]	@ (80004e0 <init_joystick+0x6c>)
 800047e:	f7ff feb5 	bl	80001ec <activate_clock_for>

	for(int i = 0; i < 4; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	e022      	b.n	80004ce <init_joystick+0x5a>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = joystick[i].pin;
 8000488:	4a16      	ldr	r2, [pc, #88]	@ (80004e4 <init_joystick+0x70>)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	4413      	add	r3, r2
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	607b      	str	r3, [r7, #4]
		initStruct.Mode = MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
		initStruct.Pull = PULL_UP;
 8000498:	2301      	movs	r3, #1
 800049a:	60fb      	str	r3, [r7, #12]
		gpio_init(joystick[i].port, &initStruct);
 800049c:	4a11      	ldr	r2, [pc, #68]	@ (80004e4 <init_joystick+0x70>)
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff feb3 	bl	8000214 <gpio_init>
		gpio_write_pin(joystick[i].port, joystick[i].pin, HIGH);
 80004ae:	4a0d      	ldr	r2, [pc, #52]	@ (80004e4 <init_joystick+0x70>)
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <init_joystick+0x70>)
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	4413      	add	r3, r2
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	f7ff fef1 	bl	80002aa <gpio_write_pin>
	for(int i = 0; i < 4; i++)
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	ddd9      	ble.n	8000488 <init_joystick+0x14>
	}
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	4002104c 	.word	0x4002104c
 80004e4:	20000058 	.word	0x20000058

080004e8 <setNumber>:


void setNumber(int num)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b089      	sub	sp, #36	@ 0x24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	int d[4] = {
			(num / 1000) % 10,
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a49      	ldr	r2, [pc, #292]	@ (8000618 <setNumber+0x130>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1192      	asrs	r2, r2, #6
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	1ad1      	subs	r1, r2, r3
 80004fe:	4b47      	ldr	r3, [pc, #284]	@ (800061c <setNumber+0x134>)
 8000500:	fb83 2301 	smull	r2, r3, r3, r1
 8000504:	109a      	asrs	r2, r3, #2
 8000506:	17cb      	asrs	r3, r1, #31
 8000508:	1ad2      	subs	r2, r2, r3
 800050a:	4613      	mov	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	1aca      	subs	r2, r1, r3
	int d[4] = {
 8000514:	60ba      	str	r2, [r7, #8]
			(num / 100) % 10,
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a41      	ldr	r2, [pc, #260]	@ (8000620 <setNumber+0x138>)
 800051a:	fb82 1203 	smull	r1, r2, r2, r3
 800051e:	1152      	asrs	r2, r2, #5
 8000520:	17db      	asrs	r3, r3, #31
 8000522:	1ad1      	subs	r1, r2, r3
 8000524:	4b3d      	ldr	r3, [pc, #244]	@ (800061c <setNumber+0x134>)
 8000526:	fb83 2301 	smull	r2, r3, r3, r1
 800052a:	109a      	asrs	r2, r3, #2
 800052c:	17cb      	asrs	r3, r1, #31
 800052e:	1ad2      	subs	r2, r2, r3
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	1aca      	subs	r2, r1, r3
	int d[4] = {
 800053a:	60fa      	str	r2, [r7, #12]
			(num / 10) % 10,
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a37      	ldr	r2, [pc, #220]	@ (800061c <setNumber+0x134>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	1092      	asrs	r2, r2, #2
 8000546:	17db      	asrs	r3, r3, #31
 8000548:	1ad1      	subs	r1, r2, r3
 800054a:	4b34      	ldr	r3, [pc, #208]	@ (800061c <setNumber+0x134>)
 800054c:	fb83 2301 	smull	r2, r3, r3, r1
 8000550:	109a      	asrs	r2, r3, #2
 8000552:	17cb      	asrs	r3, r1, #31
 8000554:	1ad2      	subs	r2, r2, r3
 8000556:	4613      	mov	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	1aca      	subs	r2, r1, r3
	int d[4] = {
 8000560:	613a      	str	r2, [r7, #16]
			(num / 1) % 10
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <setNumber+0x134>)
 8000566:	fb83 2301 	smull	r2, r3, r3, r1
 800056a:	109a      	asrs	r2, r3, #2
 800056c:	17cb      	asrs	r3, r1, #31
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	1aca      	subs	r2, r1, r3
	int d[4] = {
 800057a:	617a      	str	r2, [r7, #20]
	};

	for(int j = 0; j < 4; j++)
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	e042      	b.n	8000608 <setNumber+0x120>
	{
	  for(int i = 0; i < 7; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	e01c      	b.n	80005c2 <setNumber+0xda>
	  {
		  gpio_write_pin(seventSegmentDisplay[i].port, seventSegmentDisplay[i].pin, numbers[d[j]][i]);
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <setNumber+0x13c>)
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000590:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <setNumber+0x13c>)
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	4413      	add	r3, r2
 8000598:	6859      	ldr	r1, [r3, #4]
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	3320      	adds	r3, #32
 80005a0:	443b      	add	r3, r7
 80005a2:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80005a6:	4c20      	ldr	r4, [pc, #128]	@ (8000628 <setNumber+0x140>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	69ba      	ldr	r2, [r7, #24]
 80005b0:	4413      	add	r3, r2
 80005b2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80005b6:	461a      	mov	r2, r3
 80005b8:	f7ff fe77 	bl	80002aa <gpio_write_pin>
	  for(int i = 0; i < 7; i++)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	3301      	adds	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2b06      	cmp	r3, #6
 80005c6:	dddf      	ble.n	8000588 <setNumber+0xa0>
	  }
	  gpio_write_pin(digits[j].port, digits[j].pin, HIGH);
 80005c8:	4a18      	ldr	r2, [pc, #96]	@ (800062c <setNumber+0x144>)
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <setNumber+0x144>)
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	4413      	add	r3, r2
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff fe64 	bl	80002aa <gpio_write_pin>
	  delay(15);
 80005e2:	200f      	movs	r0, #15
 80005e4:	f7ff fece 	bl	8000384 <delay>
	  gpio_write_pin(digits[j].port, digits[j].pin, LOW);
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <setNumber+0x144>)
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005f0:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <setNumber+0x144>)
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	4413      	add	r3, r2
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f7ff fe54 	bl	80002aa <gpio_write_pin>
	for(int j = 0; j < 4; j++)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3301      	adds	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	2b03      	cmp	r3, #3
 800060c:	ddb9      	ble.n	8000582 <setNumber+0x9a>
	}
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3724      	adds	r7, #36	@ 0x24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	10624dd3 	.word	0x10624dd3
 800061c:	66666667 	.word	0x66666667
 8000620:	51eb851f 	.word	0x51eb851f
 8000624:	20000000 	.word	0x20000000
 8000628:	20000078 	.word	0x20000078
 800062c:	20000038 	.word	0x20000038

08000630 <main>:


int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	init_seven_segment();
 8000636:	f7ff febd 	bl	80003b4 <init_seven_segment>
	init_joystick();
 800063a:	f7ff ff1b 	bl	8000474 <init_joystick>
	tim6_init(3999, DELAY_IN_MS - 1); // 1s delay
 800063e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8000642:	f640 709f 	movw	r0, #3999	@ 0xf9f
 8000646:	f7ff fe7b 	bl	8000340 <tim6_init>
	while(1)
	{
		int clicked = !gpio_read_pin(JOYSTICK_CLICK.port, JOYSTICK_CLICK.pin);
 800064a:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <main+0xa4>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <main+0xa4>)
 8000650:	69d2      	ldr	r2, [r2, #28]
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe4a 	bl	80002ee <gpio_read_pin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	607b      	str	r3, [r7, #4]
		setNumber(counter);
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <main+0xa8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff3b 	bl	80004e8 <setNumber>

		 if (READ_BIT(TIM6->SR, 0))
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <main+0xac>)
 8000674:	8a1b      	ldrh	r3, [r3, #16]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0e4      	beq.n	800064a <main+0x1a>
		 {
			CLEAR_BIT(TIM6->SR, 0);
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <main+0xac>)
 8000682:	8a1b      	ldrh	r3, [r3, #16]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <main+0xac>)
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	b29b      	uxth	r3, r3
 800068e:	8213      	strh	r3, [r2, #16]
		 	clicked ? counter-- : counter++;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <main+0x72>
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <main+0xa8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <main+0xa8>)
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e004      	b.n	80006ac <main+0x7c>
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <main+0xa8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <main+0xa8>)
 80006aa:	6013      	str	r3, [r2, #0]

		 	if(counter > COUNTER_MAX)
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <main+0xa8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006b4:	4293      	cmp	r3, r2
 80006b6:	dd03      	ble.n	80006c0 <main+0x90>
		 		counter = COUNTER_MIN;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <main+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e7c4      	b.n	800064a <main+0x1a>
		 	else if(counter < COUNTER_MIN)
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <main+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dac0      	bge.n	800064a <main+0x1a>
		 		counter = COUNTER_MAX;
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <main+0xa8>)
 80006ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006ce:	601a      	str	r2, [r3, #0]
	{
 80006d0:	e7bb      	b.n	800064a <main+0x1a>
 80006d2:	bf00      	nop
 80006d4:	20000058 	.word	0x20000058
 80006d8:	200001b0 	.word	0x200001b0
 80006dc:	40001000 	.word	0x40001000

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemInit+0x9c>)
 80006e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ec:	4a23      	ldr	r2, [pc, #140]	@ (800077c <SystemInit+0x9c>)
 80006ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Set Interrupt Group Priority ------------------------------------------------------------*/
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = 0x3UL;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <SystemInit+0x9c>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	603b      	str	r3, [r7, #0]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000706:	4013      	ands	r3, r2
 8000708:	603b      	str	r3, [r7, #0]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000712:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071a:	603b      	str	r3, [r7, #0]
  SCB->AIRCR =  reg_value;
 800071c:	4a17      	ldr	r2, [pc, #92]	@ (800077c <SystemInit+0x9c>)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	60d3      	str	r3, [r2, #12]

  /* System Clock Configuration ------------------------------------------------------------*/
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <SystemInit+0xa0>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <SystemInit+0xa0>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	@ 0x60
  reg_value = RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <SystemInit+0xa0>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <SystemInit+0xa0>)
 800073a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073c:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <SystemInit+0xa0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6593      	str	r3, [r2, #88]	@ 0x58
  reg_value = RCC->APB1ENR1 & RCC_APB1ENR1_PWREN;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <SystemInit+0xa0>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->CR |= RCC_CR_MSIRGSEL;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <SystemInit+0xa0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <SystemInit+0xa0>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6013      	str	r3, [r2, #0]
  reg_value = RCC->CR & ~(RCC_CR_MSIRANGE);
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <SystemInit+0xa0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000762:	603b      	str	r3, [r7, #0]
  RCC->CR |= (RCC_CR_MSIRANGE_6);
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SystemInit+0xa0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SystemInit+0xa0>)
 800076a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800076e:	6013      	str	r3, [r2, #0]

  SystemCoreClockUpdate();
 8000770:	f000 f808 	bl	8000784 <SystemCoreClockUpdate>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	40021000 	.word	0x40021000

08000784 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800078a:	4b4f      	ldr	r3, [pc, #316]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d107      	bne.n	80007a6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000796:	4b4c      	ldr	r3, [pc, #304]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 8000798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e005      	b.n	80007b2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80007a6:	4b48      	ldr	r3, [pc, #288]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	f003 030f 	and.w	r3, r3, #15
 80007b0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80007b2:	4a46      	ldr	r2, [pc, #280]	@ (80008cc <SystemCoreClockUpdate+0x148>)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007bc:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 030c 	and.w	r3, r3, #12
 80007c4:	2b0c      	cmp	r3, #12
 80007c6:	d866      	bhi.n	8000896 <SystemCoreClockUpdate+0x112>
 80007c8:	a201      	add	r2, pc, #4	@ (adr r2, 80007d0 <SystemCoreClockUpdate+0x4c>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	08000805 	.word	0x08000805
 80007d4:	08000897 	.word	0x08000897
 80007d8:	08000897 	.word	0x08000897
 80007dc:	08000897 	.word	0x08000897
 80007e0:	0800080d 	.word	0x0800080d
 80007e4:	08000897 	.word	0x08000897
 80007e8:	08000897 	.word	0x08000897
 80007ec:	08000897 	.word	0x08000897
 80007f0:	08000815 	.word	0x08000815
 80007f4:	08000897 	.word	0x08000897
 80007f8:	08000897 	.word	0x08000897
 80007fc:	08000897 	.word	0x08000897
 8000800:	0800081d 	.word	0x0800081d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000804:	4a32      	ldr	r2, [pc, #200]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	6013      	str	r3, [r2, #0]
      break;
 800080a:	e048      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 800080e:	4a31      	ldr	r2, [pc, #196]	@ (80008d4 <SystemCoreClockUpdate+0x150>)
 8000810:	601a      	str	r2, [r3, #0]
      break;
 8000812:	e044      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000814:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000816:	4a30      	ldr	r2, [pc, #192]	@ (80008d8 <SystemCoreClockUpdate+0x154>)
 8000818:	601a      	str	r2, [r3, #0]
      break;
 800081a:	e040      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000826:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	3301      	adds	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d003      	beq.n	8000842 <SystemCoreClockUpdate+0xbe>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d006      	beq.n	800084e <SystemCoreClockUpdate+0xca>
 8000840:	e00b      	b.n	800085a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000842:	4a24      	ldr	r2, [pc, #144]	@ (80008d4 <SystemCoreClockUpdate+0x150>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	613b      	str	r3, [r7, #16]
          break;
 800084c:	e00b      	b.n	8000866 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800084e:	4a22      	ldr	r2, [pc, #136]	@ (80008d8 <SystemCoreClockUpdate+0x154>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	613b      	str	r3, [r7, #16]
          break;
 8000858:	e005      	b.n	8000866 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	613b      	str	r3, [r7, #16]
          break;
 8000864:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0e5b      	lsrs	r3, r3, #25
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	3301      	adds	r3, #1
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000892:	6013      	str	r3, [r2, #0]
      break;
 8000894:	e003      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	6013      	str	r3, [r2, #0]
      break;
 800089c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <SystemCoreClockUpdate+0x144>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	f003 030f 	and.w	r3, r3, #15
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <SystemCoreClockUpdate+0x158>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	fa22 f303 	lsr.w	r3, r2, r3
 80008b8:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemCoreClockUpdate+0x14c>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	371c      	adds	r7, #28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	080009a4 	.word	0x080009a4
 80008d0:	20000190 	.word	0x20000190
 80008d4:	00f42400 	.word	0x00f42400
 80008d8:	007a1200 	.word	0x007a1200
 80008dc:	08000994 	.word	0x08000994

080008e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e0:	480d      	ldr	r0, [pc, #52]	@ (8000918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e4:	f7ff fefc 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090e:	f000 f811 	bl	8000934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fe8d 	bl	8000630 <main>

08000916 <LoopForever>:

LoopForever:
  b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   r0, =_estack
 8000918:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8000924:	080009dc 	.word	0x080009dc
  ldr r2, =_sbss
 8000928:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 800092c:	200001b4 	.word	0x200001b4

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <__libc_init_array>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4d0d      	ldr	r5, [pc, #52]	@ (800096c <__libc_init_array+0x38>)
 8000938:	4c0d      	ldr	r4, [pc, #52]	@ (8000970 <__libc_init_array+0x3c>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	2600      	movs	r6, #0
 8000940:	42a6      	cmp	r6, r4
 8000942:	d109      	bne.n	8000958 <__libc_init_array+0x24>
 8000944:	4d0b      	ldr	r5, [pc, #44]	@ (8000974 <__libc_init_array+0x40>)
 8000946:	4c0c      	ldr	r4, [pc, #48]	@ (8000978 <__libc_init_array+0x44>)
 8000948:	f000 f818 	bl	800097c <_init>
 800094c:	1b64      	subs	r4, r4, r5
 800094e:	10a4      	asrs	r4, r4, #2
 8000950:	2600      	movs	r6, #0
 8000952:	42a6      	cmp	r6, r4
 8000954:	d105      	bne.n	8000962 <__libc_init_array+0x2e>
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f855 3b04 	ldr.w	r3, [r5], #4
 800095c:	4798      	blx	r3
 800095e:	3601      	adds	r6, #1
 8000960:	e7ee      	b.n	8000940 <__libc_init_array+0xc>
 8000962:	f855 3b04 	ldr.w	r3, [r5], #4
 8000966:	4798      	blx	r3
 8000968:	3601      	adds	r6, #1
 800096a:	e7f2      	b.n	8000952 <__libc_init_array+0x1e>
 800096c:	080009d4 	.word	0x080009d4
 8000970:	080009d4 	.word	0x080009d4
 8000974:	080009d4 	.word	0x080009d4
 8000978:	080009d8 	.word	0x080009d8

0800097c <_init>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr

08000988 <_fini>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	bf00      	nop
 800098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098e:	bc08      	pop	{r3}
 8000990:	469e      	mov	lr, r3
 8000992:	4770      	bx	lr
