
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a9c  08000a9c  00002194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000a9c  08000a9c  00002194  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000a9c  08000a9c  00002194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a9c  08000a9c  00001a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aa0  08000aa0  00001aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08000aa4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000194  08000c38  00002194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08000c38  000021b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eb2  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000314  00000000  00000000  00003076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00003390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000009f  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000121a  00000000  00000000  0000350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d0d  00000000  00000000  00004729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000484e  00000000  00000000  00005436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c0  00000000  00000000  00009cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00009f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000194 	.word	0x20000194
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a44 	.word	0x08000a44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000198 	.word	0x20000198
 80001e8:	08000a44 	.word	0x08000a44

080001ec <set_bit>:
	GPIO_TypeDef* port;
	uint32_t pin;
} Pin;


void set_bit(REG32 *reg, unsigned int bit_pos) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
    *reg |= (1 << bit_pos);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2101      	movs	r1, #1
 80001fc:	683a      	ldr	r2, [r7, #0]
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <clear_bit>:

void clear_bit(REG32 *reg,  uint32_t bit_pos) {
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
    *reg &= ~(1 << bit_pos);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2101      	movs	r1, #1
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	401a      	ands	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	601a      	str	r2, [r3, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <read_bit>:

uint32_t read_bit(REG32 *reg, uint32_t bit_pos) {
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	6039      	str	r1, [r7, #0]
    return (*reg & (1 << bit_pos)) ? 1 : 0;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2101      	movs	r1, #1
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	bf14      	ite	ne
 800025a:	2301      	movne	r3, #1
 800025c:	2300      	moveq	r3, #0
 800025e:	b2db      	uxtb	r3, r3
}
 8000260:	4618      	mov	r0, r3
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr

0800026c <activate_clock_for>:

void activate_clock_for(REG32 *reg, int gpio_en_bit)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
    *reg |= (1 << gpio_en_bit);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2101      	movs	r1, #1
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	431a      	orrs	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <gpio_init>:

void gpio_init(GPIO_TypeDef *GPIOx, GPIO_InitStruct *init)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    uint32_t pin_pos = init->Pin * 2U;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]

    GPIOx->MODER &= ~(0b11 << pin_pos);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2103      	movs	r1, #3
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	43d2      	mvns	r2, r2
 80002b4:	401a      	ands	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (init->Mode << pin_pos);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	6859      	ldr	r1, [r3, #4]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]

    GPIOx->OSPEEDR &= ~(0b11 << pin_pos);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	2103      	movs	r1, #3
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	43d2      	mvns	r2, r2
 80002dc:	401a      	ands	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |= (init->Speed << pin_pos);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	689a      	ldr	r2, [r3, #8]
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	68d9      	ldr	r1, [r3, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	609a      	str	r2, [r3, #8]

    GPIOx->PUPDR &= ~(0b11 << pin_pos);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	2103      	movs	r1, #3
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000302:	43d2      	mvns	r2, r2
 8000304:	401a      	ands	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= (init->Pull << pin_pos);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	68da      	ldr	r2, [r3, #12]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6899      	ldr	r1, [r3, #8]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	60da      	str	r2, [r3, #12]
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <gpio_write_pin>:

void gpio_write_pin(GPIO_TypeDef *GPIOx, uint32_t pin, uint32_t state)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b084      	sub	sp, #16
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
    if (state == HIGH) {
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d106      	bne.n	800034a <gpio_write_pin+0x20>
        set_bit(&GPIOx->BSRR, pin);
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3318      	adds	r3, #24
 8000340:	68b9      	ldr	r1, [r7, #8]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff52 	bl	80001ec <set_bit>
    } else {
        set_bit(&GPIOx->BRR, pin);
    }
}
 8000348:	e005      	b.n	8000356 <gpio_write_pin+0x2c>
        set_bit(&GPIOx->BRR, pin);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3328      	adds	r3, #40	@ 0x28
 800034e:	68b9      	ldr	r1, [r7, #8]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff4b 	bl	80001ec <set_bit>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <gpio_read_pin>:

uint32_t gpio_read_pin(GPIO_TypeDef *GPIOx, uint32_t pin)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    return (GPIOx->IDR & (1 << pin)) ? HIGH : LOW;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	2101      	movs	r1, #1
 800036e:	683a      	ldr	r2, [r7, #0]
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	4013      	ands	r3, r2
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <enable_VddIO2>:

void enable_VddIO2()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    set_bit(PWR_CR2, 9);
 8000390:	2109      	movs	r1, #9
 8000392:	4802      	ldr	r0, [pc, #8]	@ (800039c <enable_VddIO2+0x10>)
 8000394:	f7ff ff2a 	bl	80001ec <set_bit>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40007004 	.word	0x40007004

080003a0 <tim6_init>:
} TIMx_TypeDef;

#define TIM6 ((TIMx_TypeDef*) TIM6_BASE)

void tim6_init()
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    activate_clock_for(&RCC->APB1ENR1, 4); // Enable TIM6 clock (bit 4)
 80003a4:	2104      	movs	r1, #4
 80003a6:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <tim6_init+0x30>)
 80003a8:	f7ff ff60 	bl	800026c <activate_clock_for>

    TIM6->PSC = 3999;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <tim6_init+0x34>)
 80003ae:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80003b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    TIM6->ARR = 999;
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <tim6_init+0x34>)
 80003b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003ba:	859a      	strh	r2, [r3, #44]	@ 0x2c

    TIM6->CR1 |= (1 << 0);
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <tim6_init+0x34>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <tim6_init+0x34>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	8013      	strh	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021058 	.word	0x40021058
 80003d4:	40001000 	.word	0x40001000

080003d8 <delay>:

void delay(uint32_t seconds)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < seconds; i++) {
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e012      	b.n	800040c <delay+0x34>
        while (!(TIM6->SR & 1));
 80003e6:	bf00      	nop
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <delay+0x4c>)
 80003ea:	8a1b      	ldrh	r3, [r3, #16]
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f8      	beq.n	80003e8 <delay+0x10>
        TIM6->SR &= ~1;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <delay+0x4c>)
 80003f8:	8a1b      	ldrh	r3, [r3, #16]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4a09      	ldr	r2, [pc, #36]	@ (8000424 <delay+0x4c>)
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	b29b      	uxth	r3, r3
 8000404:	8213      	strh	r3, [r2, #16]
    for (uint32_t i = 0; i < seconds; i++) {
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	d3e8      	bcc.n	80003e6 <delay+0xe>
    }
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40001000 	.word	0x40001000

08000428 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
    while (ms >= 1000) {
 8000430:	e006      	b.n	8000440 <delay_ms+0x18>
        delay(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ffd0 	bl	80003d8 <delay>
        ms -= 1000;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800043e:	607b      	str	r3, [r7, #4]
    while (ms >= 1000) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000446:	d2f4      	bcs.n	8000432 <delay_ms+0xa>
    }

    if (ms > 0) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d01b      	beq.n	8000486 <delay_ms+0x5e>
        uint32_t start = TIM6->CNT;
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <delay_ms+0x68>)
 8000450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000452:	60fb      	str	r3, [r7, #12]
        while ((TIM6->CNT - start) < ms) {
 8000454:	e00f      	b.n	8000476 <delay_ms+0x4e>
            if (TIM6->CNT < start) {
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <delay_ms+0x68>)
 8000458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	d90a      	bls.n	8000476 <delay_ms+0x4e>
                while ((1000 - start + TIM6->CNT) < ms);
 8000460:	bf00      	nop
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <delay_ms+0x68>)
 8000464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	d8f6      	bhi.n	8000462 <delay_ms+0x3a>
                break;
 8000474:	e007      	b.n	8000486 <delay_ms+0x5e>
        while ((TIM6->CNT - start) < ms) {
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <delay_ms+0x68>)
 8000478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	d8e8      	bhi.n	8000456 <delay_ms+0x2e>
            }
        }
    }
 8000484:	e7ff      	b.n	8000486 <delay_ms+0x5e>
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40001000 	.word	0x40001000

08000494 <init_seven_segment>:
#define COUNTER_MIN 0

#define DELAY 50

void init_seven_segment()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	@ 0x28
 8000498:	af00      	add	r7, sp, #0
	enable_VddIO2();
 800049a:	f7ff ff77 	bl	800038c <enable_VddIO2>
	activate_clock_for(&RCC->AHB2ENR, GPIOBEN);
 800049e:	2101      	movs	r1, #1
 80004a0:	4828      	ldr	r0, [pc, #160]	@ (8000544 <init_seven_segment+0xb0>)
 80004a2:	f7ff fee3 	bl	800026c <activate_clock_for>
	activate_clock_for(&RCC->AHB2ENR, GPIOGEN);
 80004a6:	2106      	movs	r1, #6
 80004a8:	4826      	ldr	r0, [pc, #152]	@ (8000544 <init_seven_segment+0xb0>)
 80004aa:	f7ff fedf 	bl	800026c <activate_clock_for>

	for(int i = 0; i < 7; i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80004b2:	e014      	b.n	80004de <init_seven_segment+0x4a>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = seventSegmentDisplay[i].pin;
 80004b4:	4a24      	ldr	r2, [pc, #144]	@ (8000548 <init_seven_segment+0xb4>)
 80004b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4413      	add	r3, r2
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	613b      	str	r3, [r7, #16]
		initStruct.Mode = MODE_OUTPUT;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
		initStruct.Pull = PULL_NO;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
		initStruct.Speed = OUTPUT_LOWSPEED;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
		gpio_init(GPIOG, &initStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	481e      	ldr	r0, [pc, #120]	@ (800054c <init_seven_segment+0xb8>)
 80004d4:	f7ff fede 	bl	8000294 <gpio_init>
	for(int i = 0; i < 7; i++)
 80004d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004da:	3301      	adds	r3, #1
 80004dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	2b06      	cmp	r3, #6
 80004e2:	dde7      	ble.n	80004b4 <init_seven_segment+0x20>
	}

	for(int i = 0; i < 4; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	623b      	str	r3, [r7, #32]
 80004e8:	e024      	b.n	8000534 <init_seven_segment+0xa0>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = digits[i].pin;
 80004ea:	4a19      	ldr	r2, [pc, #100]	@ (8000550 <init_seven_segment+0xbc>)
 80004ec:	6a3b      	ldr	r3, [r7, #32]
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	4413      	add	r3, r2
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	603b      	str	r3, [r7, #0]
		initStruct.Mode = MODE_OUTPUT;
 80004f6:	2301      	movs	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
		initStruct.Pull = PULL_NO;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
		initStruct.Speed = OUTPUT_LOWSPEED;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
		gpio_init(digits[i].port, &initStruct);
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <init_seven_segment+0xbc>)
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800050a:	463a      	mov	r2, r7
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fec0 	bl	8000294 <gpio_init>
		gpio_write_pin(digits[i].port, digits[i].pin, HIGH);
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <init_seven_segment+0xbc>)
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800051c:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <init_seven_segment+0xbc>)
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f7ff fefe 	bl	800032a <gpio_write_pin>
	for(int i = 0; i < 4; i++)
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	3301      	adds	r3, #1
 8000532:	623b      	str	r3, [r7, #32]
 8000534:	6a3b      	ldr	r3, [r7, #32]
 8000536:	2b03      	cmp	r3, #3
 8000538:	ddd7      	ble.n	80004ea <init_seven_segment+0x56>
	}
}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	@ 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	4002104c 	.word	0x4002104c
 8000548:	20000000 	.word	0x20000000
 800054c:	48001800 	.word	0x48001800
 8000550:	20000038 	.word	0x20000038

08000554 <init_joystick>:


void init_joystick()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
	activate_clock_for(&RCC->AHB2ENR, GPIOEEN);
 800055a:	2104      	movs	r1, #4
 800055c:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <init_joystick+0x6c>)
 800055e:	f7ff fe85 	bl	800026c <activate_clock_for>

	for(int i = 0; i < 4; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e022      	b.n	80005ae <init_joystick+0x5a>
	{
		GPIO_InitStruct initStruct;
		initStruct.Pin = joystick[i].pin;
 8000568:	4a16      	ldr	r2, [pc, #88]	@ (80005c4 <init_joystick+0x70>)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	4413      	add	r3, r2
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	607b      	str	r3, [r7, #4]
		initStruct.Mode = MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
		initStruct.Pull = PULL_UP;
 8000578:	2301      	movs	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
		gpio_init(joystick[i].port, &initStruct);
 800057c:	4a11      	ldr	r2, [pc, #68]	@ (80005c4 <init_joystick+0x70>)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe83 	bl	8000294 <gpio_init>
		gpio_write_pin(joystick[i].port, joystick[i].pin, HIGH);
 800058e:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <init_joystick+0x70>)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <init_joystick+0x70>)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	f7ff fec1 	bl	800032a <gpio_write_pin>
	for(int i = 0; i < 4; i++)
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3301      	adds	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	ddd9      	ble.n	8000568 <init_joystick+0x14>
	}
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	4002104c 	.word	0x4002104c
 80005c4:	20000058 	.word	0x20000058

080005c8 <setNumber>:


void setNumber(int num)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b089      	sub	sp, #36	@ 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	int d[4] = {
			(num / 1000) % 10,
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a49      	ldr	r2, [pc, #292]	@ (80006f8 <setNumber+0x130>)
 80005d4:	fb82 1203 	smull	r1, r2, r2, r3
 80005d8:	1192      	asrs	r2, r2, #6
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad1      	subs	r1, r2, r3
 80005de:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <setNumber+0x134>)
 80005e0:	fb83 2301 	smull	r2, r3, r3, r1
 80005e4:	109a      	asrs	r2, r3, #2
 80005e6:	17cb      	asrs	r3, r1, #31
 80005e8:	1ad2      	subs	r2, r2, r3
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	1aca      	subs	r2, r1, r3
	int d[4] = {
 80005f4:	60ba      	str	r2, [r7, #8]
			(num / 100) % 10,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a41      	ldr	r2, [pc, #260]	@ (8000700 <setNumber+0x138>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1152      	asrs	r2, r2, #5
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad1      	subs	r1, r2, r3
 8000604:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <setNumber+0x134>)
 8000606:	fb83 2301 	smull	r2, r3, r3, r1
 800060a:	109a      	asrs	r2, r3, #2
 800060c:	17cb      	asrs	r3, r1, #31
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	1aca      	subs	r2, r1, r3
	int d[4] = {
 800061a:	60fa      	str	r2, [r7, #12]
			(num / 10) % 10,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a37      	ldr	r2, [pc, #220]	@ (80006fc <setNumber+0x134>)
 8000620:	fb82 1203 	smull	r1, r2, r2, r3
 8000624:	1092      	asrs	r2, r2, #2
 8000626:	17db      	asrs	r3, r3, #31
 8000628:	1ad1      	subs	r1, r2, r3
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <setNumber+0x134>)
 800062c:	fb83 2301 	smull	r2, r3, r3, r1
 8000630:	109a      	asrs	r2, r3, #2
 8000632:	17cb      	asrs	r3, r1, #31
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	1aca      	subs	r2, r1, r3
	int d[4] = {
 8000640:	613a      	str	r2, [r7, #16]
			(num / 1) % 10
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <setNumber+0x134>)
 8000646:	fb83 2301 	smull	r2, r3, r3, r1
 800064a:	109a      	asrs	r2, r3, #2
 800064c:	17cb      	asrs	r3, r1, #31
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1aca      	subs	r2, r1, r3
	int d[4] = {
 800065a:	617a      	str	r2, [r7, #20]
	};

	for(int j = 0; j < 4; j++)
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	e042      	b.n	80006e8 <setNumber+0x120>
	{
	  for(int i = 0; i < 7; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	e01c      	b.n	80006a2 <setNumber+0xda>
	  {
		  gpio_write_pin(seventSegmentDisplay[i].port, seventSegmentDisplay[i].pin, numbers[d[j]][i]);
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <setNumber+0x13c>)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000670:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <setNumber+0x13c>)
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	6859      	ldr	r1, [r3, #4]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	3320      	adds	r3, #32
 8000680:	443b      	add	r3, r7
 8000682:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000686:	4c20      	ldr	r4, [pc, #128]	@ (8000708 <setNumber+0x140>)
 8000688:	4613      	mov	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	4413      	add	r3, r2
 8000692:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000696:	461a      	mov	r2, r3
 8000698:	f7ff fe47 	bl	800032a <gpio_write_pin>
	  for(int i = 0; i < 7; i++)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	3301      	adds	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	dddf      	ble.n	8000668 <setNumber+0xa0>
	  }
	  gpio_write_pin(digits[j].port, digits[j].pin, HIGH);
 80006a8:	4a18      	ldr	r2, [pc, #96]	@ (800070c <setNumber+0x144>)
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006b0:	4a16      	ldr	r2, [pc, #88]	@ (800070c <setNumber+0x144>)
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4413      	add	r3, r2
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4619      	mov	r1, r3
 80006be:	f7ff fe34 	bl	800032a <gpio_write_pin>
	  delay_ms(1);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff feb0 	bl	8000428 <delay_ms>
	  gpio_write_pin(digits[j].port, digits[j].pin, LOW);
 80006c8:	4a10      	ldr	r2, [pc, #64]	@ (800070c <setNumber+0x144>)
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <setNumber+0x144>)
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	f7ff fe24 	bl	800032a <gpio_write_pin>
	for(int j = 0; j < 4; j++)
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3301      	adds	r3, #1
 80006e6:	61fb      	str	r3, [r7, #28]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	ddb9      	ble.n	8000662 <setNumber+0x9a>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3724      	adds	r7, #36	@ 0x24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	10624dd3 	.word	0x10624dd3
 80006fc:	66666667 	.word	0x66666667
 8000700:	51eb851f 	.word	0x51eb851f
 8000704:	20000000 	.word	0x20000000
 8000708:	20000078 	.word	0x20000078
 800070c:	20000038 	.word	0x20000038

08000710 <main>:


int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	init_seven_segment();
 8000716:	f7ff febd 	bl	8000494 <init_seven_segment>
	init_joystick();
 800071a:	f7ff ff1b 	bl	8000554 <init_joystick>
	tim6_init();
 800071e:	f7ff fe3f 	bl	80003a0 <tim6_init>
	while(1)
	{
		int clicked = !gpio_read_pin(GPIOE, 15);
 8000722:	210f      	movs	r1, #15
 8000724:	481d      	ldr	r0, [pc, #116]	@ (800079c <main+0x8c>)
 8000726:	f7ff fe1a 	bl	800035e <gpio_read_pin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	607b      	str	r3, [r7, #4]
		setNumber(counter);
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <main+0x90>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff43 	bl	80005c8 <setNumber>

		 if (read_bit(&TIM6->SR, 0))
 8000742:	2100      	movs	r1, #0
 8000744:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <main+0x94>)
 8000746:	f7ff fd7a 	bl	800023e <read_bit>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0e8      	beq.n	8000722 <main+0x12>
		 {
			clear_bit(&TIM6->SR, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <main+0x94>)
 8000754:	f7ff fd5e 	bl	8000214 <clear_bit>
		 	clicked ? counter-- : counter++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <main+0x5a>
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <main+0x90>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <main+0x90>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	e004      	b.n	8000774 <main+0x64>
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <main+0x90>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <main+0x90>)
 8000772:	6013      	str	r3, [r2, #0]

		 	if(counter > COUNTER_MAX)
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <main+0x90>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f242 720f 	movw	r2, #9999	@ 0x270f
 800077c:	4293      	cmp	r3, r2
 800077e:	dd03      	ble.n	8000788 <main+0x78>
		 		counter = COUNTER_MIN;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <main+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e7cc      	b.n	8000722 <main+0x12>
		 	else if(counter < COUNTER_MIN)
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <main+0x90>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dac8      	bge.n	8000722 <main+0x12>
		 		counter = COUNTER_MAX;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <main+0x90>)
 8000792:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000796:	601a      	str	r2, [r3, #0]
	{
 8000798:	e7c3      	b.n	8000722 <main+0x12>
 800079a:	bf00      	nop
 800079c:	48001000 	.word	0x48001000
 80007a0:	200001b0 	.word	0x200001b0
 80007a4:	40001010 	.word	0x40001010

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <SystemInit+0x9c>)
 80007b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <SystemInit+0x9c>)
 80007b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Set Interrupt Group Priority ------------------------------------------------------------*/
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = 0x3UL;
 80007be:	2303      	movs	r3, #3
 80007c0:	607b      	str	r3, [r7, #4]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <SystemInit+0x9c>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	603b      	str	r3, [r7, #0]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ce:	4013      	ands	r3, r2
 80007d0:	603b      	str	r3, [r7, #0]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007da:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e2:	603b      	str	r3, [r7, #0]
  SCB->AIRCR =  reg_value;
 80007e4:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <SystemInit+0x9c>)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	60d3      	str	r3, [r2, #12]

  /* System Clock Configuration ------------------------------------------------------------*/
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <SystemInit+0xa0>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	4a16      	ldr	r2, [pc, #88]	@ (8000848 <SystemInit+0xa0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	@ 0x60
  reg_value = RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <SystemInit+0xa0>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <SystemInit+0xa0>)
 8000802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000804:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <SystemInit+0xa0>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080a:	6593      	str	r3, [r2, #88]	@ 0x58
  reg_value = RCC->APB1ENR1 & RCC_APB1ENR1_PWREN;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <SystemInit+0xa0>)
 800080e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000814:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->CR |= RCC_CR_MSIRGSEL;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <SystemInit+0xa0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0b      	ldr	r2, [pc, #44]	@ (8000848 <SystemInit+0xa0>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6013      	str	r3, [r2, #0]
  reg_value = RCC->CR & ~(RCC_CR_MSIRANGE);
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <SystemInit+0xa0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800082a:	603b      	str	r3, [r7, #0]
  RCC->CR |= (RCC_CR_MSIRANGE_6);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <SystemInit+0xa0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <SystemInit+0xa0>)
 8000832:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000836:	6013      	str	r3, [r2, #0]

  SystemCoreClockUpdate();
 8000838:	f000 f808 	bl	800084c <SystemCoreClockUpdate>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000ed00 	.word	0xe000ed00
 8000848:	40021000 	.word	0x40021000

0800084c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000852:	4b4f      	ldr	r3, [pc, #316]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	2b00      	cmp	r3, #0
 800085c:	d107      	bne.n	800086e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800085e:	4b4c      	ldr	r3, [pc, #304]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e005      	b.n	800087a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <SystemCoreClockUpdate+0x148>)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000884:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f003 030c 	and.w	r3, r3, #12
 800088c:	2b0c      	cmp	r3, #12
 800088e:	d866      	bhi.n	800095e <SystemCoreClockUpdate+0x112>
 8000890:	a201      	add	r2, pc, #4	@ (adr r2, 8000898 <SystemCoreClockUpdate+0x4c>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008cd 	.word	0x080008cd
 800089c:	0800095f 	.word	0x0800095f
 80008a0:	0800095f 	.word	0x0800095f
 80008a4:	0800095f 	.word	0x0800095f
 80008a8:	080008d5 	.word	0x080008d5
 80008ac:	0800095f 	.word	0x0800095f
 80008b0:	0800095f 	.word	0x0800095f
 80008b4:	0800095f 	.word	0x0800095f
 80008b8:	080008dd 	.word	0x080008dd
 80008bc:	0800095f 	.word	0x0800095f
 80008c0:	0800095f 	.word	0x0800095f
 80008c4:	0800095f 	.word	0x0800095f
 80008c8:	080008e5 	.word	0x080008e5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80008cc:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	6013      	str	r3, [r2, #0]
      break;
 80008d2:	e048      	b.n	8000966 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008d4:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 80008d6:	4a31      	ldr	r2, [pc, #196]	@ (800099c <SystemCoreClockUpdate+0x150>)
 80008d8:	601a      	str	r2, [r3, #0]
      break;
 80008da:	e044      	b.n	8000966 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <SystemCoreClockUpdate+0x154>)
 80008e0:	601a      	str	r2, [r3, #0]
      break;
 80008e2:	e040      	b.n	8000966 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	3301      	adds	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d003      	beq.n	800090a <SystemCoreClockUpdate+0xbe>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d006      	beq.n	8000916 <SystemCoreClockUpdate+0xca>
 8000908:	e00b      	b.n	8000922 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800090a:	4a24      	ldr	r2, [pc, #144]	@ (800099c <SystemCoreClockUpdate+0x150>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	613b      	str	r3, [r7, #16]
          break;
 8000914:	e00b      	b.n	800092e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000916:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <SystemCoreClockUpdate+0x154>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	613b      	str	r3, [r7, #16]
          break;
 8000920:	e005      	b.n	800092e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	613b      	str	r3, [r7, #16]
          break;
 800092c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	0a1b      	lsrs	r3, r3, #8
 8000934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0e5b      	lsrs	r3, r3, #25
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	3301      	adds	r3, #1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	fbb2 f3f3 	udiv	r3, r2, r3
 8000958:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 800095a:	6013      	str	r3, [r2, #0]
      break;
 800095c:	e003      	b.n	8000966 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	6013      	str	r3, [r2, #0]
      break;
 8000964:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <SystemCoreClockUpdate+0x144>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	4a0c      	ldr	r2, [pc, #48]	@ (80009a4 <SystemCoreClockUpdate+0x158>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	fa22 f303 	lsr.w	r3, r2, r3
 8000980:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <SystemCoreClockUpdate+0x14c>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	08000a6c 	.word	0x08000a6c
 8000998:	20000190 	.word	0x20000190
 800099c:	00f42400 	.word	0x00f42400
 80009a0:	007a1200 	.word	0x007a1200
 80009a4:	08000a5c 	.word	0x08000a5c

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f7ff fefc 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fe99 	bl	8000710 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80009ec:	08000aa4 	.word	0x08000aa4
  ldr r2, =_sbss
 80009f0:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80009f4:	200001b4 	.word	0x200001b4

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	@ (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 f818 	bl	8000a44 <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a9c 	.word	0x08000a9c
 8000a38:	08000a9c 	.word	0x08000a9c
 8000a3c:	08000a9c 	.word	0x08000a9c
 8000a40:	08000aa0 	.word	0x08000aa0

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
